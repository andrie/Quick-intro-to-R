Quick introduction to R
========================================================
author: Andrie de Vries
date: 2015-06-04
width: 1380
height: 760



About your trainers
===================

Andrie de Vries

- Author of *R for Dummies*
- Set up an independent market research and statistics consultancy in 2009
- Worked as consultant for Revolution Analytics during 2012
- Joined the Revolution in 2013
- Responsible for professional services and technical training




Introduction
============
type: section


Why R?
=====

What is R?

* The fastest growing statistical programming language
* Open source implementation of S
* Over 6,000 packages on [CRAN](http://cran.r-project.org/web/packages/available_packages_by_name.html)

***

Why learn R?

* Rapid Prototyping: Turn ideas into software quickly and faithfully
* Excellent connectivity: C/C++, FORTRAN, Java
* Production quality visualization



Setting the scene
=================
type: section


Quick R Example
==================


* Based on [Kaggle competition](http://www.kaggle.com/c/hack-reduce-dunnhumby-hackathon) data
* Objective:

    - Given 13 weeks of data
    - Predict sales in week 26
    
***

![](images/kaggle-forecast.png)




Read and prepare data
=====================

```{r quick-example}
filename <- "data/dunnhumby hack reduce product launch challenge - training set.csv"
dat <- read.csv(filename)[, 1:7]
names(dat) <- c("id", "cat", "week", "stores", "units", "customers", "repeat")

wk13 <- dat[dat$week==13, ]
wk26 <- dat[dat$week==26, ]
df <- data.frame(wk13, wk26=wk26$units)
head(df)
```


Plotting the data
=================

Plot week 26 sales compared to wk 13

```{r example-plot-1}
library(ggplot2)
qplot(units, wk26, data=df, alpha=I(0.25))
```


Plotting the data on log scale
==============================

And the same, on log scale

```{r example-plot-2}
library(ggplot2)
qplot(units, wk26, data=df, log="xy", alpha=I(0.25))
```



Fit a linear regression model
======================

Since the data seemed to indicate a better fit using log transform, we transform the units to log units on both sides of the equation


```{r example-model}
fit <- lm(log(wk26) ~ log(units) + repeat. + customers + log(stores) + 0, 
          data=df)
summary(fit)
```


Model diagnostics
=================


```{r example-diagnostics}
par(mfrow = c(2,2))
plot(fit)
```



The R command line
==================

![RStudio integrated development environment](images/RStudio.png)


The R essentials
================
type: section

Getting help
============

Access the built-in help by using `?` or with `help()`:

```r
?plot
help("plot")
```

Search documentation using `??` or `help.search()`:

```r
??plotting
help.search("plotting")
```

***

Other sources of help

* Stack Overflow
    - http://stackoverflow.com/
* R Help mailing lists 
    - http://www.r-project.org/mail.html
* Quick R 
    - http://www.statmethods.net/
* Google 
    - http://google.com
  
... to name but a few


Data objects
============

* Basic operations
* Functions
* Vectors
* Matrices
* Lists
* Data frames


Basic operations
================

```{r basic-operators}
(2+4)-3 # addition & subtraction
(3*4)/2 # multiplication & division
x <- 56 # assign
x
```



Some commonly used functions
============================

```{r seq}
seq(0, 21, 3)
length(4:8)
```



Vectors
=======

```{r vectors}
11:20 # column notation
salary <- seq(3000, 5000, length.out = 5)
salary
```



The c() word
==============

Use the function `c()` to combine elements in a vector

```{r c}
person <- c("peter", "mary", "paul", "gary", "ricky")
person
```



Subsetting vectors /1
==================

```{r subsetting}
LETTERS
LETTERS[3:6]
```


Subsetting vectors /2
==================

```{r}
x <- c(2, 5, 8, 9, 3, 7, 12, 5)
x > 5 # logical vector
x[x > 5] # subsetting using logical vector
x[c(2,4,7)] # subsetting using indexes
```



Your turn //1
=========
left: 30%

![](images/Keep-calm-and-wait-your-turn.png)

***

1. Create an object called `celsius` with the value `-40`
2. Calculate the temperature in fahrenheit.
    - Hint: fahrenheit = celsius * 9 / 5 + 32
3. Assign `[0, 5, 10, 15, 20, 25, 30]` to `celsius`. Then convert to fahrenheit.
    - Hint: Use `seq()` 
4. Use subsetting to select the 3rd and 5th element of `celcius`
    - Hint: use `[`
5. create a subset of temperatures lower than 20 degrees celcius

```{r your-turn-1, include=FALSE}
# 1. Create an object called `celsius` with the value `-40`
# 2. Calculate the temperature in fahrenheit.
#     - Hint: fahrenheit = celsius * 9 / 5 + 32
# 3. Assign `[0, 5, 10, 15, 20, 25, 30]` to `celsius`. Then convert to fahrenheit.
#     - Hint: Use `seq()` 
# 4. Use subsetting to select the 3rd and 5th element of `celcius`
#     - Hint: use `[`
# 5. create a subset of temperatures lower than 20 degrees celcius
```

Using matrices
==============

Matrices can be created by folding vectors

```{r mat}
mat <- matrix(1:9, ncol = 3)
mat
```

```{r mat-subset}
mat[1:2, 2:3] # subsetting matrix
```



Working with lists
==================

Lists can contain any set of data objects

```{r lists}
list(1, matrix(1:4, ncol = 2), "New York")
```



Data frames
===========

You can represent tabular structure with data frames. Think of a data frame as similar to a table in a database, or a nicely formatted table in Excel with headings.

- All columns are the same length
- Columns can have multiple class

```{r data-frame-1}
location <- c("New York", "London", "New York", "London", "New York")
location
```

Data frames
===========

```{r data-frame-2}
employees <- data.frame(location, person, salary)
employees
```


Subsetting data frames
======================


```{r df-subset}
employees[,"person"] # using a char
employees$person # using the dollar notation
```


Data frames: Selecting columns
==============================

```{r}
employees[, c("person", "location")] # using a char vector
employees[, 1:2] # using a numeric vector
```



Data frames: Selecting rows
===========================

```{r}
employees[1:3, c("person", "location")] # using a char vector
employees[employees$location == "New York", 1:2] # using a numeric vector
```




Your turn //2
=========
left:30%

![](images/Keep-calm-and-wait-your-turn.png)

***

1. Create a string vector `dept` containing ("sales", "production", "sales", "sales", "production")
2. Use the function `data.frame()` to combine `dept` with the `employees` table
3. Subset the `employees` table for where location is `London`
4. Subset the `employees` table for the the `dept` is `sales`

```{r your-turn-2, include=FALSE}
# 1. Create a string vector `dept` containing ("sales", "production", "sales", "sales", "production")
# 2. Use the function `data.frame()` to combine `dept` with the `employees` table
# 3. Subset the `employees` table for where location is `London`
# 4. Subset the `employees` table for the the `dept` is `sales`
```


Import and plot
===============
type: section


Correlation
===========

![](images/xkcd-correlation.png)



Importing text files
====================


General Text file function

`?read.table`

The function `read.csv()`

```{r import}
# Loading data from CSV files
filename <- "data/dunnhumby hack reduce product launch challenge - training set.csv"
dat <- read.csv(filename)[, 1:7]
```



Aside: importing other formats
==============================

Some Useful Data Import Packages

Package   | Format
------    | ------
RODBC     | Allows connection to ODBC data sources
foreign   | SAS, SPSS, Stata
SASxport  | SAS
ROracle   | Oracle connector to R
H5R       | HDF5
RJDBC     | JDBC - Java Database Connectivity
XLConnect | Microsoft Excel

... and many more on CRAN



Inspecting the data
===================

```{r inspect-1}
str(dat)
```


Modifying the column names
==========================

Create some simpler column names that are easier to work with

```{r mod-names}
names(dat)
names(dat) <- c("id", "cat", "week", "stores", "units", "customers", "repeat")
names(dat)

```


Inspecting the data
===================

```{r inspect-2}
head(dat)
tail(dat)
```



Your turn //3
=========
left: 30%

![](images/Keep-calm-and-wait-your-turn.png)
***

1. Use the function `read.csv()`  to import the file `dunnhumby hack reduce product launch challenge - question set.csv`. Assign the result to  `dat`
2. Keep only the first 7 columns of your data
3. View the top 10 and bottom 7 rows of the data. (hint: `head()`, `tail()`)
4. Rename the columns so that the columns are simpler to work with

```{r your-turn-3, include=FALSE}
# 1. Use the function `read.csv()`  to import the file `dunnhumby hack reduce product launch challenge - question set.csv`. Assign the result to  `dat`
# 2. Keep only the first 7 columns of your data
# 3. View the top 10 and bottom 7 rows of the data. (hint: `head()`, `tail()`)
# 4. Rename the columns so that the columns are simpler to work with
```




Subset and merge data
=====================

```{r subset-merge}
# Subset week 13 and week 26 data
wk13 <- dat[dat$week == 13, ]
wk26 <- dat[dat$week == 26, ]
mdat <- data.frame(wk13, wk26=wk26$units)
head(mdat)
```



Your turn //4
=========
left: 30%

![](images/Keep-calm-and-wait-your-turn.png)
***
1. Create `wk13` as a subset of `dat`, keeping only rows corresponding to  week 13.
2. Create a similar object `wk26`
3. Append the sales for week 26 to the data for week 13, and name the new object `mdat`

```{r your-turn-4, include=FALSE}
# 1. Create `wk13` as a subset of `dat`, keeping only rows corresponding to  week 13.
# 2. Create a similar object `wk26`
# 3. Append the sales for week 26 to the data for week 13, and name the new object `mdat`
```


Installing R packages
=====================

A package is collection of functions that extends the functionality of R

Package   | Function
-------   | --------
XLConnect | reading from and writing to excel files
plyr      | data manipulation, particulary group-by operations
ggplot2   | data visualization

To install packages:

RGUi                          | RStudio                       | R Prompt
----                          | ----                          | --------
Package -> Install Package(s) | Tools -> Install packages ... | `install.packages()`


Loading a package
=================

Use the function `library()` to load a package into memory.

```{r load-packages, results='hide', message=FALSE}
library(plyr) 
library(ggplot2) 
```


Data visualization
==================

R has two different graphics paradigms:

package | aim
------- | ---
base    | The original graphics engine - pen and paper model
grid    | Uses `viewports` to define windows on a grid. Object oriented

Two very popular packages make of use of `grid`


package | aim
------- | ---
`lattice` | The original `trellis` package to create multiple small subplots.
`ggplot2` | A very popular way of building plots from components, based on the theory of *grammar of graphics*



Getting started with ggplot2
==============================

Create a scatter plot


```{r qplot-1, fig.width=6, fig.height=4}
library(ggplot2) # Remember to always first load the package
qplot(units, wk26, data=mdat)
```


Add smoother
============

```{r qplot-2, fig.width=6, fig.height=4}
qplot(units, wk26, data=mdat) + 
  stat_smooth(method = "lm")
```


Add log scale
=============

```{r qplot-3, fig.width=6, fig.height=4}
qplot(units, wk26, data=mdat, log="xy") 
```


Your turn //5
=========
left: 30%

![](images/Keep-calm-and-wait-your-turn.png)
***
1. Use `qplot()` to create scatter plots and bar charts of your data
2. Create a scatter plot with a smoother

```{r your-turn-5, include=FALSE}
# 1. Use `qplot()` to create scatter plots and bar charts of your data
# 2. Create a scatter plot with a smoother
```



Splitting, applying and combining (SAC)
=================================
type:section



Splitting, applying and combining (SAC)
=================================
A very frequently performed task is to apply a function to chunks of data and then combine the results again.

Split

- Take an object (like a data frame) and split it into subsets on a common key (e.g. category)

Apply

- Apply a function to each subgroup, e.g. take the mean, count the elements, fit a model

Combine

- Recombine the pieces into a new dataframe (or a list)



SAC is easy with the package plyr
===================================


The function `ddply()` takes a data frame, applies a function to each subgroup and returns a data frame

```
ddply(.data, .variables, .fun = NULL, ...)
```

The meaning of the arguments:

Argument     | Meaning
------------ | -------------
`.data`      | A data frame
`.variables` | The variables (columns) to group by
`.fun`       | The function to apply to each piece
`...`        | Other arguments passed to `.fun`




Summarise by category
=====================

An example: take the data, and sum the unit sales for each category


```{r plyr-1}
dat2 <- ddply(dat, .(cat), summarize, units = sum(units))
head(dat2)
```



Sales of top 10 products
========================

```{r plyr-top-id}
dat2 <- ddply(dat, .(id), summarize, units = sum(units))
dat2 <- dat2[order(dat2$units, decreasing = TRUE), ]
head(dat2, 10)
```



Sales of top 10 categories
==========================

```{r plyr-top-cat}
dat2 <- ddply(dat, .(cat), summarize, units = sum(units))
dat2 <- dat2[order(dat2$units, decreasing = TRUE), ]
head(dat2, 10)
```


Your turn //6
=========
left:30%

![](images/Keep-calm-and-wait-your-turn.png)

***

1. Find the top 10 products for the category "Bag snacks"

```{r your-turn-6, include=FALSE}
# 1. Find the top 10 products for the category "Bag snacks"
```


Solution
========

```{r}
dat2 <- ddply(dat[dat$cat=="Bag Snacks", ], .(id), summarize, units = sum(units))
dat2 <- dat2[order(dat2$units, decreasing = TRUE), ]
head(dat2)
```



Create bar chart
================

To create a bar chart, try:
* Use `geom="bar"`
* Turn the numeric `id` into a `factor`

```{r bar-chart, fig.width=6, fig.height=4}
qplot(factor(id), units, data = head(dat2, 10), geom = "bar", stat = "identity")
```



Some useful geoms and stats
===========================

Some geoms to try:

geom  | meaning
----  | ------
point | scatterplot
bar   | bar chart
line  | line chart
path  | line chart


***

And some useful stats:

stat | meaning
---- | ----
identity | do not summarise
smooth   | compute smoother (e.g. `loess` or `lm`)
sum      | sum values


Your turn //7
=========
left:30%

![](images/Keep-calm-and-wait-your-turn.png)

***

1. Create a line chart of total unit sales per week
    - Hint: Use `ddply` to aggregate
    - Hint: Use `geom = "line"`
2. Add a smoother
    - Hint: Add `stat_smooth()`

```{r your-turn-7, include=FALSE}
# 1. Create a line chart of total unit sales per week
#     - Hint: Use `ddply` to aggregate
#     - Hint: Use `geom = "line"`
# 2. Add a smoother
#     - Hint: Add `stat_smooth()`
```


Solution
========

```{r qplot-line, fig.width=6, fig.height=4}
dat2 <- ddply(dat, .(week), summarise, units=sum(units))
qplot(week, units, data=dat2, geom="line") + stat_smooth()
```

Modeling
========
type: section


Self-description
================


![](images/xkcd-self_description.png)


Import and prepare the data
===========================

```{r import-model}
filename <- "data/dunnhumby hack reduce product launch challenge - training set.csv"
dat <- read.csv(filename)[, 1:7]
names(dat) <- c("id", "cat", "week", "stores", "units", "customers", "repeat")

wk13 <- dat[dat$week==13, ]
wk26 <- dat[dat$week==26, ]
dat <- data.frame(wk13, wk26=wk26$units)
```



Linear regression
=================

The process flow

* Model
* Summary
* Diagnostics
* Prediction (fitting)



Linear regression
=================

```{r lm-1}
fit <- lm(wk26 ~ units, data = dat)
summary(fit)
```



What does the formula mean?
===========================

`z | x + y`

This means model `y` as a function of `x` and `z`



Symbol | Example    |     Meaning 
------ | ---------- |     -------
 ~     | z ~ x      |     "as a function of"
 +     | z ~ x + y  |     additive terms
 :     | z ~ x:y    |     interaction
 *     | z ~ a*b    |     equivalent to `z ~ x + y + x:y`
 - 1   | z ~ x - 1  |     fit a model and drop the intercept


Extract model coefficients
==========================

```{r coef}
coef(fit)
round(c(summary(fit)$adj.r.squared, AIC(fit)), digits = 2)
```


Diagnostic Plots
================

```{r diagnostic-plot}
par(mfrow = c(2,2))
plot(fit)
```

Predict (fitting)
=================

```{r predict}
x <- predict(fit, newdata = dat)
head(x)
```



Closing thoughts:
=================

* This is a very basic tutorial!
* R has **many** different model relevant options ...
    - GLM, GAM, neural networks, Random Forest, etc.
    - Lots more on [CRAN](http://cran.r-project.org/)
    

Revolution R Enterprise
=======================

Revolution Analytics offers Enterprise grade R
- Big data, including Teradata and Hadoop
- Cross platform, including Windows, Red Hat Linux and Suse Linux
- Stability
- Scalability
- Training
- Support



 



